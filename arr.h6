# rotate an array left by one
ArrRoL: { .@0_ $@<$ @+ }

# signature:
#   initialValue array function [lfold] output
#
# the accumulate function has to have the signature:
#   accVal arrVal [F] accVal
lfold: { &-v@* {;;} {$.@<$@0 &--vv {$}$@+ ! $ &--v lfold! r;; } l?! }

# rev(0 ..< N)
revRange: { . { ; {} } { . 1- revRange! $ 1-_ $ @+ } l?! }

# 0 ..< N
range: { . { ; {} } { . 1- range! $ 1-_ @+ } l?! }

# signature:
#   array F [map] output
#
# the mapping function has to have the signature:
#   value [F] outval
map: { {_@+} @+ {}r lfold! }

# signature:
#   array F [each] output
#
# the mapping function has to have the signature:
#   value [F] outval
#
# similar to [map], but recurses for nested arrays
each: {  _. { .typeid }$@+ ${each!}@+_ @+ { l?! }@+ map! }

# signature:
#   array F [flatMap] output
#
# the mapping function has to have the signature:
#   value [F] outval
flatMap: { {@+} @+ {}r lfold! }

# signature:
#   array scalar [distrib] output
#
# the output array will be: { {A0 S} {A1 S} {A2 S} ... }
distrib: { _{_$_$@+}@+  map! }

# signature:
#   array [enum] output
#
# the output array will be: { {0 A0} {1 A1} {2 A2} ... }
enum: { .@* range! $ zip! }

# signature:
#   array [where] output
#
# returns array of indexes where value is true
#
# for stdlib readers:
#   this could be implemented more cleanly (but slower on larger arrays):
#     where: { enum! { @<@0 } filter! {@0}map! 
where: { enum! { . @<@0 {;none!} {@0 some!} l?! } filterMap! }

# signature:
#   array F [filter] output
#
# signature of F:
#   value [F] bool
filter: { {.} $@+ { {;{}} {_} l?! } @+ flatMap! }

# signature:
#   array F [filterMap] output
#
# signature of F:
#   value [F] Option
filterMap: { { {{}} {_} optionSwitch! } @+ flatMap! }

# signature:
#   arr1 arr2 [zip] output
#
# the output array will be: { {A0 B0} {A1 B1} {A2 B2} ... }
#
# if you want to broadcast a scalar instead, see [distrib]
zip: { _{}_@+ $ {$! $l$ .@0$@< r _$_$@+_ l$ @+ _$_$@+ } lfold! @<@0 }

# signature:
#   A B [match] output
#
# recursively checks for equality of values
match: { .typeid { = } { .@*r $ .@*r &---v &---v = {;;0} {zip! { !match!* } 1r lfold!} l?! r;; } l?! }

# signature:
#   A [rev] out
rev: { { _$@+ } {}r lfold! }

# signature:
#   Arr Idx [get] out
#
# 0-indexed
get: { range! {;{@<}} flatMap! !@0 }

# signature:
#   Val Arr Idx [set] out
#
# 0-indexed
set: { split! @< l _$@+@+ }

# signature:
#   ... Arr Idx F [modify] out
#
# signature for F:
#   ... OldValue [F] NewValue
#
# 0-indexed
modify: { r$.l.r get!$ { $_ l$@+! } $_@+! set! }

# signature:
#   Arr Num [split] FirstN Rem
split: { {}r range! {;{.@0_ l$ @+ $ @< }} flatMap! ! }

# signature
#   Arr Num [take] Out
take: { split! ; }

# signature
#   Arr Num [drop] Out
drop: { split! $; }
